#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          <%= @docker_name %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $network $time
# Should-Stop:       $network $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the mysql database server daemon
# Description:       Controls the main MySQL database server daemon "mysqld"
#                    and its wrapper script "mysqld_safe".
### END INIT INFO

# set -e
# set -u

### Exit code reference
# http://fedoraproject.org/wiki/Packaging:SysVInitScript
# http://refspecs.linuxbase.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html

# Source functions
<% if node['platform_family'] == 'rhel' %>
# Source RHEL function library.
. /etc/rc.d/init.d/functions
<% end %>

####
# Variables
####

STARTTIMEOUT=900
STOPTIMEOUT=900
PID_DELAY=60

<% if @pidfile -%>
pidfile="<%= @pidfile %>"
<% else -%>
pidfile="/var/run/docker.pid"
<% end -%>
lockfile="/var/lock/subsys/docker"
<% if @config.logfile -%>
logfile="<%= @config.logfile %>"
<% else -%>
logfile="/var/log/docker"
<% end -%>

####
# Helper functions
###

pid_exists() {
    PID_EXISTS=1
    if [ -f $pid_file ]; then
        DOCKER_PID=`cat $pid_file 2>/dev/null`
        if [ -n "$DOCKER_PID" ] && [ -d "/proc/$DOCKER_PID" ] ; then
            PID_EXISTS=0
        fi
    fi
    return $PID_EXISTS
}

running() {
    RUNNING=1
    <%= @docker_cmd %> ps | head -n 1 | grep ^CONTAINER 2>&1 >/dev/null
    local mret=$?
    if [ $mret -eq 0 ]; then
        RUNNING=0
    fi
    return $RUNNING
}

print_start_success() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Starting <%= @docker_name %>: " /bin/true
    <% else %>
    echo "Staring Docker instance <%= @docker_name %>"
    <% end %>
    return 0;
}

print_start_failure() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Starting <%= @docker_name %>: " /bin/false
    <% else %>
    echo "Could not start Docker instance <%= @docker_name %>"
    <% end %>
    return 0;
}

print_reload_success() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Reloading <%= @docker_name %>" /bin/true
    <% else %>
    echo "Reload success for <%= @docker_name %>"
    <% end %>
    return 0;
}

print_reload_failure() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Reloading <%= @docker_name %>" /bin/false
    <% else %>
    echo "Reload failed for <%= @docker_name %>"
    <% end %>
    return 0;
}

print_stop_success() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Stopping <%= @docker_name %>: " /bin/true
    <% else %>
    echo "Stopping Docker instance <%= @docker_name %>"
    <% end %>
    return 0;
}

print_stop_failure() {
    <% if node['platform_family'] == 'rhel' %>
    action $"Stopping <%= @docker_name %>: " /bin/false
    <% else %>
    echo "Could not stop Docker instance <%= @docker_name %>"
    <% end %>
    return 0;
}

prestart() {
    <% if @config.http_proxy %>
    export HTTP_PROXY=<%= @config.http_proxy %>
    <% end %>
    <% if @config.https_proxy %>
    export HTTPS_PROXY=<%= @config.https_proxy %>
    <% end %>
    <% if @config.no_proxy %>
    export NO_PROXY=<%= @config.no_proxy %>
    <% end %>
    <% if @config.tmpdir %>
    export TMPDIR=<%= @config.tmpdir %>
    <% end %>

    [ -x /sbin/sysctl ] || exit 6
    <% if @config.ipv4_forward %>
    /sbin/sysctl -w net.ipv4.ip_forward=1 > /dev/null 2>&1
    <% end %>
    <% if @config.ipv6_forward %>
    /sbin/sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null 2>&1
    <% end %>
}

start_command() {
    [ -x <%= @docker_bin %> ] || exit 5

    check_for_cleanup

    if ! [ -f $pidfile ]; then
        prestart
        printf "Starting <%= @docker_bin %>"
        echo "\n$(date)\n" >> $logfile
        <%= @docker_daemon_cmd %> >> $logfile 2>&1 &
        pid=$!
        touch $lockfile
        # wait up to 10 seconds for the pidfile to exist.  see
        # https://github.com/dotcloud/docker/issues/5359
        tries=0
        while [ ! -f $pidfile -a $tries -lt 10 ]; do
            sleep 1
            tries=$((tries + 1))
        done
        print_start_success
    else
        print_start_failure
    fi
}

####
# Init script actions
###

# Start <%= @docker_name %>
start() {
    # exit 0 if already running.
    if running; then
        print_start_success
        return 0;
    fi

    # run program
    start_command;
    start_pid=$?

    # Timeout loop
    local TIMEOUT=$STARTTIMEOUT
    while [ $TIMEOUT -gt 0 ]; do
        if running; then
            break
        fi

        let CURRENT_DELAY=${STARTTIMEOUT}-${TIMEOUT}
        if [ $CURRENT_DELAY -gt $PID_DELAY ] \
          && ! pid_exists; then
            break
        fi

        sleep 1
        let TIMEOUT=${TIMEOUT}-1
    done

    if running; then
        # successbaby.gif
        print_start_success
        return 0
    elif ! pid_exists; then
        # Handle startup failure
        print_start_failure
        return 3
    elif [ $TIMEOUT -eq 0 ]; then
        # Handle timeout
        print_start_failure
        # clean up
        kill $start_pid 2>/dev/null
        return 1
    fi
}

# Status of <%= @docker_name %>
status() {
    if running; then
        echo "<%= @docker_name %> is running"
        return 0
    else
        echo "<%= @docker_name %> is not running"
        return 1
    fi
}

stop() {
    if running; then
        echo "Stopping Docker instance <%= @docker_name %>"
        if [ -f $pidfile ]; then
            /bin/kill `cat $pidfile 2>/dev/null`
            kstat=$?
        fi

        # Timeout loop
        local TIMEOUT=$STARTTIMEOUT
        while [ $TIMEOUT -gt 0 ]; do
            if running; then
            sleep 1
            fi
            let TIMEOUT=${TIMEOUT}-1
        done

        return $kstat
    else
        echo "Docker instance <%= @docker_name %> Stopped."
        return 0
    fi

}

restart() {
    stop
    start
}

check_for_cleanup() {
    if [ -f ${pidfile} ]; then
        /bin/ps -fp $(cat ${pidfile}) > /dev/null || rm ${pidfile}
    fi
}

# main()
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop ; start
        ;;
    reload)
        reload
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|reload}"
        exit 2
esac

exit $?
